package blockchain

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/sha256"
	"encoding/gob"
	"encoding/hex"
	"fmt"
	"time"
)

// Transaction represents a blockchain transaction
type Transaction struct {
	TransactionID string  // Unique ID for the transaction
	Sender        string  // Address of the sender
	Receiver      string  // Address of the receiver
	Amount        float64 // Transaction amount
	Timestamp     int64   // Time of creation
	Signature     string  // Digital signature for verification
	GasFee        float64 // Gas fee for prioritization (added later)
	Inputs        []UTXO  // Inputs referencing previous UTXOs
	Outputs       []UTXO  // Outputs generated by this transaction
}

// TransactionInput references a UTXO being spent
type TransactionInput struct {
	TransactionID string
	OutputIndex   int
	Signature     string
}

// TransactionOutput defines a new UTXO created by a transaction
type TransactionOutput struct {
	Receiver string
	Amount   float64
}

// MultiSigTransaction represents a transaction requiring multiple signatures
type MultiSigTransaction struct {
	Transaction
	Signatures map[string]string // Address -> Signature
}

func NewTransaction(sender, receiver string, amount, gasFee float64) *Transaction {
	tx := &Transaction{
		Sender:    sender,
		Receiver:  receiver,
		Amount:    amount,
		Timestamp: time.Now().Unix(),
		GasFee:    gasFee, // Include gas fee
	}
	tx.TransactionID = tx.GenerateTransactionID()
	return tx
}

// GenerateTransactionID generates a unique ID for the transaction
func (tx *Transaction) GenerateTransactionID() string {
	data := fmt.Sprintf("%s%s%f%d", tx.Sender, tx.Receiver, tx.Amount, tx.Timestamp)
	hash := sha256.Sum256([]byte(data))
	return hex.EncodeToString(hash[:])
}

// Hash computes the hash of the transaction data.
func (tx *Transaction) Hash() string {
	data := fmt.Sprintf("%s%s%f%d", tx.Sender, tx.Receiver, tx.Amount, tx.Timestamp)
	hash := sha256.Sum256([]byte(data))
	return hex.EncodeToString(hash[:])
}


// SerializeTransaction serializes a transaction
func SerializeTransaction(tx *Transaction) ([]byte, error) {
	var buffer bytes.Buffer
	encoder := gob.NewEncoder(&buffer)
	err := encoder.Encode(tx)
	if err != nil {
		return nil, err
	}
	return buffer.Bytes(), nil
}

// DeserializeTransaction deserializes a transaction
func DeserializeTransaction(data []byte) (*Transaction, error) {
	var tx Transaction
	decoder := gob.NewDecoder(bytes.NewReader(data))
	err := decoder.Decode(&tx)
	if err != nil {
		return nil, err
	}
	return &tx, nil
}

// Equals compares two transactions for deep equality
func (tx *Transaction) Equals(other *Transaction) bool {
	if tx.TransactionID != other.TransactionID ||
		tx.Sender != other.Sender ||
		tx.Receiver != other.Receiver ||
		tx.Amount != other.Amount ||
		tx.Timestamp != other.Timestamp ||
		tx.GasFee != other.GasFee ||
		tx.Signature != other.Signature {
		return false
	}

	// Compare Inputs
	if len(tx.Inputs) != len(other.Inputs) {
		return false
	}
	for i, input := range tx.Inputs {
		if input != other.Inputs[i] {
			return false
		}
	}

	// Compare Outputs
	if len(tx.Outputs) != len(other.Outputs) {
		return false
	}
	for i, output := range tx.Outputs {
		if output != other.Outputs[i] {
			return false
		}
	}

	return true
}

// AddSignature adds a signature to the transaction
func (tx *MultiSigTransaction) AddSignature(address, signature string) error {
	if _, exists := tx.Signatures[address]; exists {
		return fmt.Errorf("signature from %s already exists", address)
	}
	tx.Signatures[address] = signature
	return nil
}

// ValidateSignatures validates a single-signature transaction.
func (tx *Transaction) ValidateSignatures(wallet interface{}, publicKeyMap map[string]*ecdsa.PublicKey) bool {
	if wallet, ok := wallet.(*Wallet); ok {
		return VerifySignature(wallet.PublicKey, tx.Hash(), tx.Signature)
	}
	return false
}


// Hash computes the hash for a multi-signature transaction.
func (tx *MultiSigTransaction) Hash() string {
	return tx.Transaction.Hash()
}

// ValidateSignatures validates a multi-signature transaction.
func (tx *MultiSigTransaction) ValidateSignatures(wallet interface{}, publicKeyMap map[string]*ecdsa.PublicKey) bool {
	multiSigWallet, ok := wallet.(*MultiSigwWallet)
	if !ok {
		return false
	}

	validSigs := 0
	for owner, signature := range tx.Signatures {
		publicKey, exists := publicKeyMap[owner]
		if !exists || publicKey == nil {
			continue
		}
		if VerifySignature(publicKey, tx.Hash(), signature) {
			validSigs++
		}
	}
	return validSigs >= multiSigWallet.RequiredSigs
}
